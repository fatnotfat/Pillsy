// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(PillsyDBContext))]
    [Migration("20240228083457_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("bfa6adf3-736e-48a5-94bb-ca60dadc0ffd"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4844),
                            Email = "nguyenphat2711@gmail.com",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4848),
                            Password = "@@admin@@",
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4851),
                            Email = "dungnvse160223@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4852),
                            Password = "@@patient@@",
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("acd3bc8a-565a-40aa-b23c-13cfb1bb4240"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4855),
                            Email = "khoatruong2509@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(4856),
                            Password = "@@doctor@@",
                            Role = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.CustomerPackage", b =>
                {
                    b.Property<Guid>("CustomerPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowPillHistory")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerPackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberScan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubcriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerPackageId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SubcriptionPackageId");

                    b.ToTable("CustomerPackage", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerPackageId = new Guid("05c54210-3feb-47ec-9cba-ea11366fc32b"),
                            AllowPillHistory = 0,
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5615),
                            CustomerPackageName = "Basic",
                            DateEnd = new DateTime(2024, 5, 28, 15, 34, 57, 644, DateTimeKind.Local).AddTicks(5591),
                            DateStart = new DateTime(2024, 2, 28, 15, 34, 57, 644, DateTimeKind.Local).AddTicks(5580),
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5616),
                            NumberScan = "2",
                            PatientId = new Guid("e8c6ece8-a51d-4161-bf30-956a40a26c2f"),
                            Status = 1,
                            SubcriptionPackageId = new Guid("75f620aa-282d-41f2-b8f3-e9b7940c9d71")
                        });
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DoctorID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorID = new Guid("eac3307e-e29d-48e6-bb79-805437d0d970"),
                            AccountId = new Guid("acd3bc8a-565a-40aa-b23c-13cfb1bb4240"),
                            CreatedBy = new Guid("acd3bc8a-565a-40aa-b23c-13cfb1bb4240"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5288),
                            FirstName = "Khoa",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5288),
                            LastName = "Truong",
                            ModifiedBy = new Guid("acd3bc8a-565a-40aa-b23c-13cfb1bb4240"),
                            PhoneNumber = "0987654321",
                            Specialty = "Khoa noi"
                        });
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderId_PayOS")
                        .HasColumnType("int");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalItem")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("PatientId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Property<Guid>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            PatientID = new Guid("e8c6ece8-a51d-4161-bf30-956a40a26c2f"),
                            AccountId = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            Address = "Bac Ninh",
                            CreatedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5427),
                            DateOfBirth = new DateTime(2002, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dung",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5428),
                            LastName = "Nguyen",
                            ModifiedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            PaymentId = new Guid("3a85a5c0-2189-4ef1-8dcd-bb399a844166"),
                            PhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("3a85a5c0-2189-4ef1-8dcd-bb399a844166"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5264),
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5264),
                            PaymentType = "Smart Banking",
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.Property<Guid>("PillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Afternoon")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DosagePerDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Evening")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PillManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPerDose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PillId");

                    b.HasIndex("PillManagerId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Pill", (string)null);

                    b.HasData(
                        new
                        {
                            PillId = new Guid("e0cd6642-0d26-4653-9341-1fcc0033675a"),
                            Afternoon = 0,
                            CreatedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5638),
                            DosagePerDay = 1,
                            Evening = 0,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5639),
                            ModifiedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 1 vien 30 phut sau khi an",
                            PillName = "Nexium mup",
                            PrescriptionId = new Guid("a3931257-9c52-4237-92e0-6ef798fd55f0"),
                            Quantity = 30,
                            QuantityPerDose = 1,
                            Status = 1,
                            Unit = "vien"
                        },
                        new
                        {
                            PillId = new Guid("403369ce-b0bc-4a07-8a71-ded36fca729b"),
                            Afternoon = 0,
                            CreatedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5654),
                            DosagePerDay = 2,
                            Evening = 1,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5655),
                            ModifiedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 2 vien chia lam 2 lan(sang, toi - sau khi an)",
                            PillName = "Amoxycilin",
                            PrescriptionId = new Guid("a3931257-9c52-4237-92e0-6ef798fd55f0"),
                            Quantity = 20,
                            QuantityPerDose = 1,
                            Status = 1,
                            Unit = "vien"
                        });
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.Property<Guid>("PillManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TakenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PillManagerId");

                    b.HasIndex("PatientId");

                    b.ToTable("PillManager", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageBase64")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Prescription", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionID = new Guid("a3931257-9c52-4237-92e0-6ef798fd55f0"),
                            CreatedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5459),
                            Diagnosis = "viem da day",
                            DoctorID = new Guid("eac3307e-e29d-48e6-bb79-805437d0d970"),
                            ExaminationDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "test",
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5460),
                            ModifiedBy = new Guid("e6125d71-4bf1-4274-a3e9-0c61d778d897"),
                            PatientID = new Guid("e8c6ece8-a51d-4161-bf30-956a40a26c2f"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("SubscriptionId");

                    b.ToTable("SubscriptionPackage", (string)null);

                    b.HasData(
                        new
                        {
                            SubscriptionId = new Guid("75f620aa-282d-41f2-b8f3-e9b7940c9d71"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5484),
                            CurrencyUnit = "USD",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5484),
                            PackageType = "Basic",
                            Period = "90",
                            Status = 1,
                            UnitPrice = 0f
                        },
                        new
                        {
                            SubscriptionId = new Guid("53077e66-d1a7-4b6b-a8e7-dc88401e2f04"),
                            CreatedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5557),
                            CurrencyUnit = "USD",
                            LastModifiedDate = new DateTime(2024, 2, 28, 8, 34, 57, 644, DateTimeKind.Utc).AddTicks(5558),
                            PackageType = "Premium",
                            Period = "365",
                            Status = 1,
                            UnitPrice = 2f
                        });
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscriptionPackageSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SubscriptionPackageSubscriptionId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5446a0a3-3ee8-4a0d-90ed-66038f1f1fbb",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "d5247bdc-6ecd-431d-a5ab-187901bc5d8f",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "Doctor"
                        },
                        new
                        {
                            Id = "f7b8069a-ba53-4970-bd2d-eed6ee32b353",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "Patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6eab9c5f-eb1e-480c-96b7-3e2c3d8bea9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd51202d-bfab-42aa-ba77-ce3bde381069",
                            Email = "nguyenphat2711@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "NGUYENPHAT2711@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d85fd415-3bde-42b6-8452-b4a59bf2b1bc",
                            TwoFactorEnabled = false,
                            UserName = "Phat Nguyen"
                        },
                        new
                        {
                            Id = "b33fe319-5a6e-4fd8-aef3-6024d0ac3754",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57c34f55-e30f-4f3a-82b4-848310c37266",
                            Email = "dungnvse160223@fpt.edu.vn",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DUNGNVSE160223@FPT.EDU.VN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5280e727-5ea9-4c62-b236-9acbafaf3f10",
                            TwoFactorEnabled = false,
                            UserName = "Dung Nguyen"
                        },
                        new
                        {
                            Id = "17d815a6-8392-4144-81a5-416fe1bbb673",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afbb94e7-ca87-4276-a01b-ec6648f3461a",
                            Email = "khoatruong2509@fpt.edu.vn",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "KHOATRUONG2509@FPT.EDU.VN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c2f65bc-73d4-4573-b67d-30ab8add124b",
                            TwoFactorEnabled = false,
                            UserName = "Khoa Truong"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.CustomerPackage", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("SubcriptionPackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany("Patients")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.HasOne("BusinessObject.PillManager", "PillManager")
                        .WithMany("Pill")
                        .HasForeignKey("PillManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Prescription", "Prescription")
                        .WithMany("Pills")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PillManager");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackageSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Payment");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerPackages");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.Navigation("Pill");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Navigation("Pills");
                });

            modelBuilder.Entity("BusinessObject.SubscriptionPackage", b =>
                {
                    b.Navigation("CustomerPackages");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
