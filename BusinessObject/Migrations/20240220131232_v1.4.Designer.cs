// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(PillsyDBContext))]
    [Migration("20240220131232_v1.4")]
    partial class v14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("555b7fa4-206f-4552-86ee-118721b10701"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6294),
                            Email = "nguyenphat2711@gmail.com",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6299),
                            Password = "@@admin@@",
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6304),
                            Email = "dungnvse160223@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6305),
                            Password = "@@patient@@",
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("dea422f0-5393-455f-ba44-1cc99ab74342"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6309),
                            Email = "khoatruong2509@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6310),
                            Password = "@@doctor@@",
                            Role = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.CustomerPackage", b =>
                {
                    b.Property<Guid>("CustomerPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowPillHistory")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerPackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberScan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubcriptionPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerPackageId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SubcriptionPackageId");

                    b.ToTable("CustomerPackage", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerPackageId = new Guid("cf51667e-ad2e-4e92-9a1a-ba7b329f403d"),
                            AllowPillHistory = 0,
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7349),
                            CustomerPackageName = "Basic",
                            DateEnd = new DateTime(2024, 5, 20, 20, 12, 31, 561, DateTimeKind.Local).AddTicks(7317),
                            DateStart = new DateTime(2024, 2, 20, 20, 12, 31, 561, DateTimeKind.Local).AddTicks(7303),
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7351),
                            NumberScan = "2",
                            PatientId = new Guid("5d1156d4-3cb6-4e07-91c7-fe5716080795"),
                            Status = 1,
                            SubcriptionPackageId = new Guid("e55b0c52-dc55-422d-9972-35d52d7ab860")
                        });
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DoctorID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorID = new Guid("4493708f-ff50-43f2-b26f-b4581e46719d"),
                            AccountId = new Guid("dea422f0-5393-455f-ba44-1cc99ab74342"),
                            CreatedBy = new Guid("dea422f0-5393-455f-ba44-1cc99ab74342"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7003),
                            FirstName = "Khoa",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7005),
                            LastName = "Truong",
                            ModifiedBy = new Guid("dea422f0-5393-455f-ba44-1cc99ab74342"),
                            PhoneNumber = "0987654321",
                            Specialty = "Khoa noi"
                        });
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Property<Guid>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            PatientID = new Guid("5d1156d4-3cb6-4e07-91c7-fe5716080795"),
                            AccountId = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            Address = "Bac Ninh",
                            CreatedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7167),
                            DateOfBirth = new DateTime(2002, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dung",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7169),
                            LastName = "Nguyen",
                            ModifiedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            PaymentId = new Guid("754c3edf-002d-4b62-9d13-e2a934260a8b"),
                            PhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("754c3edf-002d-4b62-9d13-e2a934260a8b"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6967),
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(6969),
                            PaymentType = "Smart Banking",
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.Property<Guid>("PillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Afternoon")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DosagePerDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Evening")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PillManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPerDose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PillId");

                    b.HasIndex("PillManagerId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Pill", (string)null);

                    b.HasData(
                        new
                        {
                            PillId = new Guid("5dbdce42-4737-4019-8eee-2cd56fb511b1"),
                            Afternoon = 0,
                            CreatedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7384),
                            DosagePerDay = 1,
                            Evening = 0,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7386),
                            ModifiedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 1 vien 30 phut sau khi an",
                            PillName = "Nexium mup",
                            PrescriptionId = new Guid("f320f722-141a-4eea-a355-667e423ff8e6"),
                            Quantity = 30,
                            QuantityPerDose = 1,
                            Status = 1,
                            Unit = "vien"
                        },
                        new
                        {
                            PillId = new Guid("0d26c8a7-3a41-4354-af4a-059a1ca66716"),
                            Afternoon = 0,
                            CreatedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7408),
                            DosagePerDay = 2,
                            Evening = 1,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7409),
                            ModifiedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 2 vien chia lam 2 lan(sang, toi - sau khi an)",
                            PillName = "Amoxycilin",
                            PrescriptionId = new Guid("f320f722-141a-4eea-a355-667e423ff8e6"),
                            Quantity = 20,
                            QuantityPerDose = 1,
                            Status = 1,
                            Unit = "vien"
                        });
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.Property<Guid>("PillManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TakenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PillManagerId");

                    b.HasIndex("PatientId");

                    b.ToTable("PillManager", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageBase64")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Prescription", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionID = new Guid("f320f722-141a-4eea-a355-667e423ff8e6"),
                            CreatedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7220),
                            Diagnosis = "viem da day",
                            DoctorID = new Guid("4493708f-ff50-43f2-b26f-b4581e46719d"),
                            ExaminationDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "test",
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7222),
                            ModifiedBy = new Guid("5a1be7f8-4d4d-45c6-b730-481d3b183e3f"),
                            PatientID = new Guid("5d1156d4-3cb6-4e07-91c7-fe5716080795"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("PackageId");

                    b.ToTable("SubscriptionPackage", (string)null);

                    b.HasData(
                        new
                        {
                            PackageId = new Guid("e55b0c52-dc55-422d-9972-35d52d7ab860"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7255),
                            CurrencyUnit = "USD",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7256),
                            PackageType = "Basic",
                            Period = "90",
                            Status = 1,
                            UnitPrice = 0f
                        },
                        new
                        {
                            PackageId = new Guid("0a84d947-1066-4fbe-a1ef-779732e5978c"),
                            CreatedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7276),
                            CurrencyUnit = "USD",
                            LastModifiedDate = new DateTime(2024, 2, 20, 13, 12, 31, 561, DateTimeKind.Utc).AddTicks(7278),
                            PackageType = "Premium",
                            Period = "365",
                            Status = 1,
                            UnitPrice = 2f
                        });
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscriptionPackagePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SubscriptionPackagePackageId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "236ce4f4-cccc-4a2e-b391-b2dd5f595813",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "865816ba-41ec-4832-9b55-eee7e363c434",
                            ConcurrencyStamp = "2",
                            Name = "Doctor",
                            NormalizedName = "Doctor"
                        },
                        new
                        {
                            Id = "1320cf8d-01a6-47bc-abe8-fa76b46888af",
                            ConcurrencyStamp = "3",
                            Name = "Patient",
                            NormalizedName = "Patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "61224228-6a4d-4e4a-880f-89c12dc20f17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfe3fbd4-8d36-4562-aaa5-7cb3201fcad8",
                            Email = "nguyenphat2711@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "NGUYENPHAT2711@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44ef5ace-efd1-4f40-b867-d3596c42627e",
                            TwoFactorEnabled = false,
                            UserName = "Phat Nguyen"
                        },
                        new
                        {
                            Id = "846ca57e-eb03-4831-840f-bda238b43290",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a9ddee7-9160-40e2-8a43-37e51747bd9b",
                            Email = "dungnvse160223@fpt.edu.vn",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DUNGNVSE160223@FPT.EDU.VN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ec31073-e348-497b-a22a-a03b6739367a",
                            TwoFactorEnabled = false,
                            UserName = "Dung Nguyen"
                        },
                        new
                        {
                            Id = "97dce11b-edfd-4447-bdce-ad7b0daebe24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55c3f2ff-7eb9-4021-8abe-3c14821f42eb",
                            Email = "khoatruong2509@fpt.edu.vn",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "KHOATRUONG2509@FPT.EDU.VN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4738d05-2411-4bab-a18c-d9f5804be973",
                            TwoFactorEnabled = false,
                            UserName = "Khoa Truong"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.CustomerPackage", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("SubcriptionPackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany("Patients")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.HasOne("BusinessObject.PillManager", "PillManager")
                        .WithMany("Pill")
                        .HasForeignKey("PillManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Prescription", "Prescription")
                        .WithMany("Pills")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PillManager");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackagePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Payment");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerPackages");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BusinessObject.PillManager", b =>
                {
                    b.Navigation("Pill");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Navigation("Pills");
                });

            modelBuilder.Entity("BusinessObject.SubscriptionPackage", b =>
                {
                    b.Navigation("CustomerPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
