// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(PillsyDBContext))]
    [Migration("20240121114653_Initialize_v1.0")]
    partial class Initialize_v10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("991aa4ef-c3fe-4dcd-a94a-171648b05161"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1373),
                            Email = "nguyenphat2711@gmail.com",
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1376),
                            Password = "@@admin@@",
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1379),
                            Email = "dungnvse160223@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1379),
                            Password = "@@patient@@",
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("dc3e145d-59b6-4148-8d98-cab8876f5092"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1381),
                            Email = "khoatruong2509@fpt.edu.vn",
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1382),
                            Password = "@@doctor@@",
                            Role = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DoctorID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorID = new Guid("e1a2543b-39a6-45c4-a1b8-df6adf7ee41b"),
                            AccountId = new Guid("dc3e145d-59b6-4148-8d98-cab8876f5092"),
                            CreatedBy = new Guid("dc3e145d-59b6-4148-8d98-cab8876f5092"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1522),
                            FirstName = "Khoa",
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1523),
                            LastName = "Truong",
                            ModifiedBy = new Guid("dc3e145d-59b6-4148-8d98-cab8876f5092"),
                            PhoneNumber = "0987654321",
                            Specialty = "Khoa noi"
                        });
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Property<Guid>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            PatientID = new Guid("aa16e71c-4b00-402f-80de-c99ff3559343"),
                            AccountId = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            Address = "Bac Ninh",
                            CreatedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1627),
                            DateOfBirth = new DateTime(2002, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dung",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1627),
                            LastName = "Nguyen",
                            ModifiedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            PaymentId = new Guid("dc2a7616-729d-483f-af85-040393546847"),
                            PhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("dc2a7616-729d-483f-af85-040393546847"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1504),
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1505),
                            PaymentType = "Momo",
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.Property<Guid>("PillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Afternoon")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DosagePerDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Evening")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPerDose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PillId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Pill", (string)null);

                    b.HasData(
                        new
                        {
                            PillId = new Guid("b0a795f3-67e8-4d7b-b542-3193120c3913"),
                            Afternoon = 0,
                            CreatedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1676),
                            DosagePerDay = 1,
                            Evening = 0,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1677),
                            ModifiedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 1 vien 30 phut sau khi an",
                            PillName = "Nexium mup",
                            PrescriptionId = new Guid("b83dff89-9f45-4ec8-8857-fc181beaba31"),
                            Quantity = 30,
                            QuantityPerDose = 1,
                            ScheduleId = new Guid("c5482527-4763-4366-af81-e49047ff8534"),
                            Status = 1,
                            Unit = "vien"
                        },
                        new
                        {
                            PillId = new Guid("3ffb60c0-becc-42fd-bf5c-2bb16bfd63f8"),
                            Afternoon = 0,
                            CreatedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1689),
                            DosagePerDay = 2,
                            Evening = 1,
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1689),
                            ModifiedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            Morning = 1,
                            Period = "ngay",
                            PillDescription = "1 ngay uong 2 vien chia lam 2 lan(sang, toi - sau khi an)",
                            PillName = "Amoxycilin",
                            PrescriptionId = new Guid("b83dff89-9f45-4ec8-8857-fc181beaba31"),
                            Quantity = 20,
                            QuantityPerDose = 1,
                            ScheduleId = new Guid("c5482527-4763-4366-af81-e49047ff8534"),
                            Status = 1,
                            Unit = "vien"
                        });
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageBase64")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Prescription", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionID = new Guid("b83dff89-9f45-4ec8-8857-fc181beaba31"),
                            CreatedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1662),
                            Diagnosis = "viem da day",
                            DoctorID = new Guid("e1a2543b-39a6-45c4-a1b8-df6adf7ee41b"),
                            ExaminationDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "test",
                            Index = 1,
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1663),
                            ModifiedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            PatientID = new Guid("aa16e71c-4b00-402f-80de-c99ff3559343"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule", (string)null);

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("c5482527-4763-4366-af81-e49047ff8534"),
                            CreatedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            CreatedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1646),
                            DateEnd = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1640),
                            LastModifiedDate = new DateTime(2024, 1, 21, 11, 46, 53, 436, DateTimeKind.Utc).AddTicks(1647),
                            ModifiedBy = new Guid("4ba51276-7081-444d-a5e1-d5776b4caaef"),
                            Notes = "Dung 3 lieu, moi ngay 1 lieu",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.SubscriptionPackage", b =>
                {
                    b.Property<Guid>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("PackageId");

                    b.ToTable("SubscriptionPackage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscriptionPackagePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SubscriptionPackagePackageId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Appointment", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany("Patients")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObject.Pill", b =>
                {
                    b.HasOne("BusinessObject.Prescription", "Prescription")
                        .WithMany("Pills")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.HasOne("BusinessObject.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObject.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackagePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Payment");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BusinessObject.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BusinessObject.Prescription", b =>
                {
                    b.Navigation("Pills");
                });
#pragma warning restore 612, 618
        }
    }
}
